{"version":3,"sources":["constants.js","components/main_link.js","components/main_nav.js","components/caption.js","components/billboard.js","App.js","serviceWorker.js","index.js"],"names":["navitems","About Me","Crust","PVCE","Teaching!","MainLink","handleChange","e","_this$props","_this","props","caption","onHover","_this$props2","this","text","react_default","a","createElement","className","onMouseOver","Component","MainNav","Object","keys","map","item","main_link","key","Caption","BillBoard","components_caption","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setCaption","setState","state","billboard","main_nav","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAAaA,cAAW,CAACC,WAAY,UAAWC,MAAQ,uBAAwBC,KAAQ,cAAeC,YAAY,OCoBpGC,6MAfbC,aAAe,SAACC,GAAI,IAAAC,EACSC,EAAKC,MAAzBC,EADWH,EACXG,SACPC,EAFkBJ,EACFI,SACRD,4EAGD,IAAAE,EACwBC,KAAKJ,MAA7BK,EADAF,EACAE,KADAF,EACKF,QADLE,EACaD,QACpB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWC,YAAcN,KAAKR,cAC1CS,UAXcM,aCmBRC,mLAZJ,IACCV,EAAYE,KAAKJ,MAAjBE,QACR,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZI,OAAOC,KAAKxB,GAAUyB,IAAI,SAACC,GAAD,OACzBV,EAAAC,EAAAC,cAACS,EAAD,CAAUZ,KAAMW,EAAME,IAAKF,EAAMf,QAAWX,EAAS0B,GAAOd,QAASA,MAFzE,YAPgBS,aCSPQ,mLAVJ,IACAlB,EAAWG,KAAKJ,MAAhBC,QACP,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZR,UANaU,aCePS,mLAbJ,IACAf,EAAQD,KAAKJ,MAAbK,KACP,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAY,kBAAjB,aAGAH,EAAAC,EAAAC,cAACa,EAAD,CAASpB,QAASI,YARFM,aC4BTW,cAzBb,SAAAA,EAAYtB,GAAM,IAAAD,EAAA,OAAAc,OAAAU,EAAA,EAAAV,CAAAT,KAAAkB,IAChBvB,EAAAc,OAAAW,EAAA,EAAAX,CAAAT,KAAAS,OAAAY,EAAA,EAAAZ,CAAAS,GAAAI,KAAAtB,KAAMJ,KASR2B,WAAa,SAACtB,GACZN,EAAK6B,SAAS,CAAC3B,QAAQI,KARvBN,EAAK8B,MAAQ,CACX5B,QAAS,+BAJKF,wEAgBhB,OACEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAACsB,EAAD,CAAWzB,KAAMD,KAAKyB,MAAM5B,UAC5BK,EAAAC,EAAAC,cAACuB,EAAD,CAAS7B,QAASE,KAAKuB,qBArBbhB,aCOEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9ee9570b.chunk.js","sourcesContent":["export const navitems = {\"About Me\": \"whoami?\", \"Crust\":\"Best.  Pizza.  Ever.\", \"PVCE\": \"FULL STACK!\", \"Teaching!\":\"<3\"};","import React, { Component } from 'react';\nimport \"./components.css\"\n\nclass MainLink extends Component {\n\n  handleChange = (e)=>{\n    const {caption, onHover} = this.props;\n    onHover(caption);\n  }\n  \n  render() {\n    const {text,caption,onHover} = this.props;\n    return (\n      <div className=\"nav-item\" onMouseOver= {this.handleChange}>\n        {text}\n      </div>\n    );\n  }\n}\n\nexport default MainLink;\n","import React, { Component } from \"react\";\nimport \"./components.css\";\nimport \"../constants.js\";\nimport MainLink from \"./main_link.js\";\nimport { navitems } from \"../constants.js\";\n\nclass MainNav extends Component {\n  \n\n  \n  render() {\n    const { onHover } = this.props;\n    return (\n      <div className=\"nav\">\n        {Object.keys(navitems).map((item) => \n          <MainLink text={item} key={item} caption = {navitems[item]} onHover={onHover}/>\n        )};\n      </div>\n    );\n  }\n}\n\nexport default MainNav;\n","import React, { Component } from \"react\";\nimport \"./components.css\";\n\nclass Caption extends Component {\n    \n  render() {\n    const {caption} = this.props;\n    return (\n      <div className=\"caption\">\n        {caption}\n      </div>\n    );\n  }\n}\n\nexport default Caption;","import React, { Component } from \"react\";\nimport \"./components.css\";\nimport Caption from \"./caption.js\"\n\nclass BillBoard extends Component {\n  render() {\n    const {text} = this.props;\n    return (\n      <div className=\"billboard\">\n        <div className = \"billboard-text\">\n        Bryan Moh\n        </div>\n        <Caption caption={text}/>\n      </div>\n    );\n  }\n}\n\nexport default BillBoard;","import React, { Component } from 'react';\nimport './App.css';\nimport MainNav from './components/main_nav';\nimport Billboard from './components/billboard'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      caption: \"Made with love and Reactjs~\"\n    }\n\n\n  }\n\n  setCaption = (text) =>{\n    this.setState({caption:text});\n  }\n\n  render() {\n    //const {caption} = this.state;\n    return (\n      <div className=\"page\">\n        <Billboard text={this.state.caption} />\n        <MainNav onHover={this.setCaption}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}